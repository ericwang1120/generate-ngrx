import { reducer } from './{{dashCase plural}}';
import * as from{{properCase plural}} from './{{dashCase plural}}';
import { Load, LoadFail, LoadSuccess } from '../actions/{{dashCase odd}}';
import { {{properCase odd}}, generateMock{{properCase odd}} } from '../models/{{dashCase odd}}';

describe('{{properCase plural}}Reducer', () => {
    const {{camelCase odd}}1 = generateMock{{properCase odd}}();
    const {{camelCase odd}}2 = { ...{{camelCase odd}}1, id: '222' };
    const {{camelCase odd}}3 = { ...{{camelCase odd}}1, id: '333' };
    const initialState: from{{properCase plural}}.State = {
        ids: [],
        entities: {},
        loading: false,
    };

    describe('undefined action', () => {
        it('should return the default state', () => {
            const result = reducer(undefined, {} as any);

            expect(result).toEqual(initialState);
        });
    });

    describe('LOAD', () => {
        const expectedResult = {
            ...initialState,
            loading: true,
        };

        it('should change loading to true', () => {
            const action = new Load();

            const result = reducer(initialState, action);

            expect(result).toEqual(expectedResult);
        });
    });

    describe('LOAD_SUCCESS', () => {
        const expectedResult = {
            ids: [{{camelCase odd}}2.id, {{camelCase odd}}3.id],
            entities: {
                [{{camelCase odd}}2.id]: {{camelCase odd}}2,
                [{{camelCase odd}}3.id]: {{camelCase odd}}3
            },
            loading: false
        };

        it('should load {{camelCase plural}}', () => {
            const action = new LoadSuccess([{{camelCase odd}}2, {{camelCase odd}}3]);

            const result = reducer(initialState, action);

            expect(result).toEqual(expectedResult);
        });
    });

    describe('LOAD_FAIL', () => {
        const expectedResult = {
            ids: [],
            entities: {},
            loading: false
        };

        it('return empty array of {{camelCase plural}} when load fail', () => {
            const action = new LoadFail('Error Message');

            const result = reducer(initialState, action);

            expect(result).toEqual(expectedResult);
        });
    });

    describe('selectors', () => {
        const expectedResult = initialState;

        it('should return correct selector', () => {
            const loading = expectedResult.loading;

            expect(from{{properCase plural}}.getLoading(expectedResult)).toEqual(loading);
        });
    });
});
